<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [01 6-step plastik\01 6-step plastik.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image 01 6-step plastik\01 6-step plastik.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6160001: Last Updated: Sat Oct 12 17:02:11 2024
<BR><P>
<H3>Maximum Stack Usage =        224 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; MX_MotorControl_Init &rArr; MCboot &rArr; SIX_STEP_Init &rArr; SIX_STEP_Clear &rArr; PWMC_SwitchOffPWM
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[72]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[8]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">NMI_Handler</a><BR>
 <LI><a href="#[a]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">MemManage_Handler</a><BR>
 <LI><a href="#[b]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">BusFault_Handler</a><BR>
 <LI><a href="#[c]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">UsageFault_Handler</a><BR>
 <LI><a href="#[d]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">SVC_Handler</a><BR>
 <LI><a href="#[e]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">DebugMon_Handler</a><BR>
 <LI><a href="#[f]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">PendSV_Handler</a><BR>
 <LI><a href="#[4a]">COMP1_2_3_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4a]">COMP1_2_3_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[22]">ADC1_2_IRQHandler</a> from stm32g4xx_mc_it.o(.text.ADC1_2_IRQHandler) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[2]">ASPEP_RXframeProcess</a> from aspep.o(.text.ASPEP_RXframeProcess) referenced 2 times from mcp_config.o(.data.aspepOverUartA)
 <LI><a href="#[0]">ASPEP_getBuffer</a> from aspep.o(.text.ASPEP_getBuffer) referenced 2 times from mcp_config.o(.data.aspepOverUartA)
 <LI><a href="#[1]">ASPEP_sendPacket</a> from aspep.o(.text.ASPEP_sendPacket) referenced 2 times from mcp_config.o(.data.aspepOverUartA)
 <LI><a href="#[b]">BusFault_Handler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[4a]">COMP1_2_3_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[4b]">COMP4_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[55]">CORDIC_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[4c]">CRS_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[1c]">DMA1_Channel1_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[1d]">DMA1_Channel2_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[1e]">DMA1_Channel3_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[1f]">DMA1_Channel4_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[20]">DMA1_Channel5_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[21]">DMA1_Channel6_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[44]">DMA2_Channel1_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[45]">DMA2_Channel2_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[46]">DMA2_Channel3_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[47]">DMA2_Channel4_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[48]">DMA2_Channel5_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[54]">DMA2_Channel6_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[53]">DMAMUX_OVR_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[e]">DebugMon_Handler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[17]">EXTI0_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[38]">EXTI15_10_IRQHandler</a> from stm32_mc_common_it.o(.text.EXTI15_10_IRQHandler) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[18]">EXTI1_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[19]">EXTI2_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[1a]">EXTI3_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[1b]">EXTI4_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[27]">EXTI9_5_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[25]">FDCAN1_IT0_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[26]">FDCAN1_IT1_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[15]">FLASH_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[56]">FMAC_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[4e]">FPU_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[9]">HardFault_Handler</a> from stm32_mc_common_it.o(.text.HardFault_Handler) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[30]">I2C1_ER_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[2f]">I2C1_EV_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[32]">I2C2_ER_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[31]">I2C2_EV_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[52]">I2C3_ER_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[51]">I2C3_EV_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[3f]">LPTIM1_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[50]">LPUART1_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[a]">MemManage_Handler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[8]">NMI_Handler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[12]">PVD_PVM_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[f]">PendSV_Handler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[16]">RCC_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[59]">RI_GetRegisterGlobal</a> from register_interface.o(.text.RI_GetRegisterGlobal) referenced from mcp.o(.rodata..L__const.RI_GetRegCommandParser.GetRegFcts)
 <LI><a href="#[5a]">RI_GetRegisterMotor1</a> from register_interface.o(.text.RI_GetRegisterMotor1) referenced from mcp.o(.rodata..L__const.RI_GetRegCommandParser.GetRegFcts)
 <LI><a href="#[5b]">RI_SetRegisterGlobal</a> from register_interface.o(.text.RI_SetRegisterGlobal) referenced from mcp.o(.rodata..L__const.RI_SetRegCommandParser.SetRegFcts)
 <LI><a href="#[5c]">RI_SetRegisterMotor1</a> from register_interface.o(.text.RI_SetRegisterMotor1) referenced from mcp.o(.rodata..L__const.RI_SetRegCommandParser.SetRegFcts)
 <LI><a href="#[4f]">RNG_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[39]">RTC_Alarm_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[13]">RTC_TAMP_LSECSS_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[14]">RTC_WKUP_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[7]">Reset_Handler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[4d]">SAI1_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[33]">SPI1_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[34]">SPI2_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[40]">SPI3_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[d]">SVC_Handler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[10]">SysTick_Handler</a> from stm32_mc_common_it.o(.text.SysTick_Handler) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[57]">SystemInit</a> from system_stm32g4xx.o(.text.SystemInit) referenced from startup_stm32g431xx.o(.text)
 <LI><a href="#[28]">TIM1_BRK_TIM15_IRQHandler</a> from stm32g4xx_mc_it.o(.text.TIM1_BRK_TIM15_IRQHandler) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[2b]">TIM1_CC_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[2a]">TIM1_TRG_COM_TIM17_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[29]">TIM1_UP_TIM16_IRQHandler</a> from stm32g4xx_mc_it.o(.text.TIM1_UP_TIM16_IRQHandler) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[2c]">TIM2_IRQHandler</a> from stm32g4xx_mc_it.o(.text.TIM2_IRQHandler) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[2d]">TIM3_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[2e]">TIM4_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[42]">TIM6_DAC_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[43]">TIM7_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[3b]">TIM8_BRK_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[3e]">TIM8_CC_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[3d]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[3c]">TIM8_UP_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[41]">UART4_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[5]">UASPEP_CFG_RECEPTION</a> from usart_aspep_driver.o(.text.UASPEP_CFG_RECEPTION) referenced 2 times from mcp_config.o(.data.aspepOverUartA)
 <LI><a href="#[6]">UASPEP_CFG_TRANSMISSION</a> from usart_aspep_driver.o(.text.UASPEP_CFG_TRANSMISSION) referenced 2 times from mcp_config.o(.data.aspepOverUartA)
 <LI><a href="#[4]">UASPEP_IDLE_ENABLE</a> from usart_aspep_driver.o(.text.UASPEP_IDLE_ENABLE) referenced 2 times from mcp_config.o(.data.aspepOverUartA)
 <LI><a href="#[3]">UASPEP_INIT</a> from usart_aspep_driver.o(.text.UASPEP_INIT) referenced 2 times from mcp_config.o(.data.aspepOverUartA)
 <LI><a href="#[49]">UCPD1_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[35]">USART1_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[36]">USART2_IRQHandler</a> from stm32_mc_common_it.o(.text.USART2_IRQHandler) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[37]">USART3_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[3a]">USBWakeUp_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[23]">USB_HP_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[24]">USB_LP_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[c]">UsageFault_Handler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[11]">WWDG_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[58]">__main</a> from __main.o(!!!main) referenced from startup_stm32g431xx.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[58]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(.text)
</UL>
<P><STRONG><a name="[5d]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[5f]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[13b]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[13c]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[13d]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[13e]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[13f]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[65]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[60]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[140]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[141]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[142]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[143]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[144]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[145]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[146]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[147]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[148]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[149]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[14a]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[14b]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[14c]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[14d]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[14e]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[14f]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[150]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[151]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[152]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[153]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[6a]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[154]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[155]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[156]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[157]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[158]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[159]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[15a]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[5e]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[15b]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[62]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[64]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[15c]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[66]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; MX_MotorControl_Init &rArr; MCboot &rArr; SIX_STEP_Init &rArr; SIX_STEP_Clear &rArr; PWMC_SwitchOffPWM
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[15d]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[73]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[69]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[15e]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[6b]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[7]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>COMP1_2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMP1_2_3_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMP1_2_3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>COMP4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>CORDIC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>DMA2_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>DMAMUX_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>FDCAN1_IT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>FDCAN1_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>FMAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>PVD_PVM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>RTC_TAMP_LSECSS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM1_TRG_COM_TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>UCPD1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>USB_HP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>USB_LP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32g431xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[98]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetRegisterMotor1
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCPA_dataLog
</UL>

<P><STRONG><a name="[6d]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[15f]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[6e]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCPA_dataLog
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[160]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[161]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[162]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[b7]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POT_Init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POT_Clear
</UL>

<P><STRONG><a name="[163]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[6f]"></a>_memset</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[129]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[164]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[165]"></a>__rt_memclr_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[70]"></a>_memset_w</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[166]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[167]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[168]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[63]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[68]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[169]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[71]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[16a]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[6c]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[16b]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[16c]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[16d]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[22]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, stm32g4xx_mc_it.o(.text.ADC1_2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADC1_2_IRQHandler &rArr; BADC_IsZcDetected
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BADC_IsZcDetected
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[102]"></a>ASPEP_HWDataReceivedIT</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, aspep.o(.text.ASPEP_HWDataReceivedIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ASPEP_HWDataReceivedIT
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[121]"></a>ASPEP_HWDataTransmittedIT</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, aspep.o(.text.ASPEP_HWDataTransmittedIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ASPEP_HWDataTransmittedIT
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[122]"></a>ASPEP_HWReset</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, aspep.o(.text.ASPEP_HWReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ASPEP_HWReset
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[2]"></a>ASPEP_RXframeProcess</STRONG> (Thumb, 1500 bytes, Stack size 40 bytes, aspep.o(.text.ASPEP_RXframeProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ASPEP_RXframeProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mcp_config.o(.data.aspepOverUartA)
</UL>
<P><STRONG><a name="[0]"></a>ASPEP_getBuffer</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, aspep.o(.text.ASPEP_getBuffer))
<BR>[Address Reference Count : 1]<UL><LI> mcp_config.o(.data.aspepOverUartA)
</UL>
<P><STRONG><a name="[1]"></a>ASPEP_sendPacket</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, aspep.o(.text.ASPEP_sendPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ASPEP_sendPacket &rArr; ASPEP_TXframeProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASPEP_TXframeProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mcp_config.o(.data.aspepOverUartA)
</UL>
<P><STRONG><a name="[a9]"></a>ASPEP_start</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, aspep.o(.text.ASPEP_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ASPEP_start
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[78]"></a>BADC_CalcAvrgElSpeedDpp</STRONG> (Thumb, 318 bytes, Stack size 20 bytes, g4xx_bemf_adc_fdbk.o(.text.BADC_CalcAvrgElSpeedDpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BADC_CalcAvrgElSpeedDpp
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BADC_CalcAvrgMecSpeedUnit
</UL>

<P><STRONG><a name="[76]"></a>BADC_CalcAvrgMecSpeedUnit</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, g4xx_bemf_adc_fdbk.o(.text.BADC_CalcAvrgMecSpeedUnit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = BADC_CalcAvrgMecSpeedUnit &rArr; BADC_CalcAvrgElSpeedDpp
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPD_IsMecSpeedReliable
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BADC_CalcAvrgElSpeedDpp
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[eb]"></a>BADC_CalcElAngle</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, g4xx_bemf_adc_fdbk.o(.text.BADC_CalcElAngle))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIX_STEP_HighFrequencyTask
</UL>

<P><STRONG><a name="[10d]"></a>BADC_CalcRevUpDemagTime</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, g4xx_bemf_adc_fdbk.o(.text.BADC_CalcRevUpDemagTime))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[113]"></a>BADC_CalcRunDemagTime</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, g4xx_bemf_adc_fdbk.o(.text.BADC_CalcRunDemagTime))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[e4]"></a>BADC_Clear</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, g4xx_bemf_adc_fdbk.o(.text.BADC_Clear))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIX_STEP_Clear
</UL>

<P><STRONG><a name="[bf]"></a>BADC_GetBemfSensorlessParam</STRONG> (Thumb, 78 bytes, Stack size 20 bytes, g4xx_bemf_adc_fdbk.o(.text.BADC_GetBemfSensorlessParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BADC_GetBemfSensorlessParam
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetRegisterMotor1
</UL>

<P><STRONG><a name="[ee]"></a>BADC_Init</STRONG> (Thumb, 964 bytes, Stack size 24 bytes, g4xx_bemf_adc_fdbk.o(.text.BADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIX_STEP_Init
</UL>

<P><STRONG><a name="[fd]"></a>BADC_IsObserverConverged</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, g4xx_bemf_adc_fdbk.o(.text.BADC_IsObserverConverged))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SixStep_StepCommution
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[74]"></a>BADC_IsZcDetected</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, g4xx_bemf_adc_fdbk.o(.text.BADC_IsZcDetected))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BADC_IsZcDetected
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>

<P><STRONG><a name="[d2]"></a>BADC_SetBemfSensorlessParam</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, g4xx_bemf_adc_fdbk.o(.text.BADC_SetBemfSensorlessParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BADC_SetBemfSensorlessParam
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_SetRegisterMotor1
</UL>

<P><STRONG><a name="[110]"></a>BADC_SetDirection</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, g4xx_bemf_adc_fdbk.o(.text.BADC_SetDirection))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[11a]"></a>BADC_SetLoopClosed</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, g4xx_bemf_adc_fdbk.o(.text.BADC_SetLoopClosed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BADC_SetLoopClosed
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[111]"></a>BADC_SetSamplingPoint</STRONG> (Thumb, 188 bytes, Stack size 8 bytes, g4xx_bemf_adc_fdbk.o(.text.BADC_SetSamplingPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BADC_SetSamplingPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[e3]"></a>BADC_SpeedMeasureOff</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, g4xx_bemf_adc_fdbk.o(.text.BADC_SpeedMeasureOff))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIX_STEP_Clear
</UL>

<P><STRONG><a name="[108]"></a>BADC_Start</STRONG> (Thumb, 348 bytes, Stack size 8 bytes, g4xx_bemf_adc_fdbk.o(.text.BADC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BADC_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[100]"></a>BADC_StepChangeEvent</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, g4xx_bemf_adc_fdbk.o(.text.BADC_StepChangeEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BADC_StepChangeEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SixStep_StepCommution
</UL>

<P><STRONG><a name="[e2]"></a>BADC_Stop</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, g4xx_bemf_adc_fdbk.o(.text.BADC_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BADC_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIX_STEP_Clear
</UL>

<P><STRONG><a name="[38]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32_mc_common_it.o(.text.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI15_10_IRQHandler &rArr; UI_HandleStartStopButton_cb &rArr; MC_StopMotor1 &rArr; MCI_StopMotor
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_HandleStartStopButton_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[101]"></a>HAL_IncTick</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32g4xx_hal.o(.text.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[7a]"></a>HAL_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32g4xx_hal.o(.text.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7c]"></a>HAL_InitTick</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stm32g4xx_hal.o(.text.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[7d]"></a>HAL_MspInit</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32g4xx_hal_msp.o(.text.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_DisableUCPDDeadBattery
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[7f]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, stm32g4xx_hal_cortex.o(.text.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_MotorControl_Init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[7b]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32g4xx_hal_cortex.o(.text.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[80]"></a>HAL_PWREx_DisableUCPDDeadBattery</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32g4xx_hal_pwr_ex.o(.text.HAL_PWREx_DisableUCPDDeadBattery))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[af]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32g4xx_hal_rcc.o(.text.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_MotorControl_Init
</UL>

<P><STRONG><a name="[82]"></a>HAL_SYSTICK_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_cortex.o(.text.HAL_SYSTICK_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
</UL>

<P><STRONG><a name="[7e]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32g4xx_hal_cortex.o(.text.HAL_SYSTICK_Config))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_MotorControl_Init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[81]"></a>HAL_SYSTICK_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32g4xx_hal_cortex.o(.text.HAL_SYSTICK_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[9]"></a>HardFault_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32_mc_common_it.o(.text.HardFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HardFault_Handler &rArr; TSK_HardwareFaultTask &rArr; SIX_STEP_Clear &rArr; PWMC_SwitchOffPWM
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HardwareFaultTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[127]"></a>LL_ADC_CommonInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, stm32g4xx_ll_adc.o(.text.LL_ADC_CommonInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_ADC_CommonInit
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[128]"></a>LL_ADC_INJ_Init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32g4xx_ll_adc.o(.text.LL_ADC_INJ_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_ADC_INJ_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[125]"></a>LL_ADC_Init</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32g4xx_ll_adc.o(.text.LL_ADC_Init))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[126]"></a>LL_ADC_REG_Init</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, stm32g4xx_ll_adc.o(.text.LL_ADC_REG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_ADC_REG_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[123]"></a>LL_EXTI_Init</STRONG> (Thumb, 416 bytes, Stack size 8 bytes, stm32g4xx_ll_exti.o(.text.LL_EXTI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[124]"></a>LL_GPIO_Init</STRONG> (Thumb, 226 bytes, Stack size 36 bytes, stm32g4xx_ll_gpio.o(.text.LL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[86]"></a>LL_RCC_GetUARTClockFreq</STRONG> (Thumb, 320 bytes, Stack size 0 bytes, stm32g4xx_ll_rcc.o(.text.LL_RCC_GetUARTClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
</UL>

<P><STRONG><a name="[85]"></a>LL_RCC_GetUSARTClockFreq</STRONG> (Thumb, 732 bytes, Stack size 0 bytes, stm32g4xx_ll_rcc.o(.text.LL_RCC_GetUSARTClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
</UL>

<P><STRONG><a name="[104]"></a>LL_SetSystemCoreClock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32g4xx_ll_utils.o(.text.LL_SetSystemCoreClock))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[12c]"></a>LL_TIM_BDTR_Init</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, stm32g4xx_ll_tim.o(.text.LL_TIM_BDTR_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_TIM_BDTR_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12a]"></a>LL_TIM_Init</STRONG> (Thumb, 258 bytes, Stack size 0 bytes, stm32g4xx_ll_tim.o(.text.LL_TIM_Init))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12b]"></a>LL_TIM_OC_Init</STRONG> (Thumb, 880 bytes, Stack size 24 bytes, stm32g4xx_ll_tim.o(.text.LL_TIM_OC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LL_TIM_OC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[84]"></a>LL_USART_Init</STRONG> (Thumb, 268 bytes, Stack size 16 bytes, stm32g4xx_ll_usart.o(.text.LL_USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_USART_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUARTClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[87]"></a>MCI_ExecBufferedCommands</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, mc_interface.o(.text.MCI_ExecBufferedCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MCI_ExecBufferedCommands &rArr; STC_ExecRamp
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_SetControlMode
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_ExecRamp
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[cf]"></a>MCI_ExecSpeedRamp</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, mc_interface.o(.text.MCI_ExecSpeedRamp))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_SetRegisterMotor1
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIX_STEP_Init
</UL>

<P><STRONG><a name="[8a]"></a>MCI_FaultAcknowledged</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, mc_interface.o(.text.MCI_FaultAcknowledged))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MCI_FaultAcknowledged
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetSTMState
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetCurrentFaults
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_ReceivedPacket
</UL>

<P><STRONG><a name="[109]"></a>MCI_FaultProcessing</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mc_interface.o(.text.MCI_FaultProcessing))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SafetyTask_PWMOFF
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HardwareFaultTask
</UL>

<P><STRONG><a name="[8d]"></a>MCI_GetAvrgMecSpeedUnit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mc_interface.o(.text.MCI_GetAvrgMecSpeedUnit))
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPD_GetAvrgMecSpeedUnit
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetRegisterMotor1
</UL>

<P><STRONG><a name="[c4]"></a>MCI_GetControlMode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mc_interface.o(.text.MCI_GetControlMode))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetRegisterMotor1
</UL>

<P><STRONG><a name="[8c]"></a>MCI_GetCurrentFaults</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mc_interface.o(.text.MCI_GetCurrentFaults))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_StopMotor
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_StartMotor
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_FaultAcknowledged
</UL>

<P><STRONG><a name="[c6]"></a>MCI_GetDutyCycleRef</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mc_interface.o(.text.MCI_GetDutyCycleRef))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetRegisterMotor1
</UL>

<P><STRONG><a name="[bc]"></a>MCI_GetFaultState</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mc_interface.o(.text.MCI_GetFaultState))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetRegisterMotor1
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SafetyTask_PWMOFF
</UL>

<P><STRONG><a name="[10a]"></a>MCI_GetImposedMotorDirection</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mc_interface.o(.text.MCI_GetImposedMotorDirection))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[be]"></a>MCI_GetLastRampFinalDuration</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mc_interface.o(.text.MCI_GetLastRampFinalDuration))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetRegisterMotor1
</UL>

<P><STRONG><a name="[bd]"></a>MCI_GetLastRampFinalSpeed</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mc_interface.o(.text.MCI_GetLastRampFinalSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetRegisterMotor1
</UL>

<P><STRONG><a name="[8f]"></a>MCI_GetMecSpeedRefUnit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mc_interface.o(.text.MCI_GetMecSpeedRefUnit))
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_GetMecSpeedRefUnit
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetRegisterMotor1
</UL>

<P><STRONG><a name="[92]"></a>MCI_GetOccurredFaults</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mc_interface.o(.text.MCI_GetOccurredFaults))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_StopMotor
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_StartMotor
</UL>

<P><STRONG><a name="[8b]"></a>MCI_GetSTMState</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mc_interface.o(.text.MCI_GetSTMState))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPDPOT_Run
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetRegisterMotor1
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_ReceivedPacket
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_GetSTMStateMotor1
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_StopMotor
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_StartMotor
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_FaultAcknowledged
</UL>

<P><STRONG><a name="[91]"></a>MCI_StartMotor</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, mc_interface.o(.text.MCI_StartMotor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MCI_StartMotor
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetSTMState
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetOccurredFaults
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetCurrentFaults
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_ReceivedPacket
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_StartMotor1
</UL>

<P><STRONG><a name="[93]"></a>MCI_StopMotor</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, mc_interface.o(.text.MCI_StopMotor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MCI_StopMotor
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetSTMState
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetOccurredFaults
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetCurrentFaults
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_ReceivedPacket
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_StopMotor1
</UL>

<P><STRONG><a name="[9a]"></a>MCI_StopRamp</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mc_interface.o(.text.MCI_StopRamp))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_ReceivedPacket
</UL>

<P><STRONG><a name="[94]"></a>MCPA_cfgLog</STRONG> (Thumb, 338 bytes, Stack size 32 bytes, mcpa.o(.text.MCPA_cfgLog))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MCPA_cfgLog
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetPtrReg
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetIDSize
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_SetRegisterMotor1
</UL>

<P><STRONG><a name="[97]"></a>MCPA_dataLog</STRONG> (Thumb, 730 bytes, Stack size 40 bytes, mcpa.o(.text.MCPA_dataLog))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MCPA_dataLog &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
</UL>

<P><STRONG><a name="[120]"></a>MCPA_flushDataLog</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, mcpa.o(.text.MCPA_flushDataLog))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MCPA_flushDataLog
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SafetyTask_PWMOFF
</UL>

<P><STRONG><a name="[99]"></a>MCP_ReceivedPacket</STRONG> (Thumb, 728 bytes, Stack size 48 bytes, mcp.o(.text.MCP_ReceivedPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MCP_ReceivedPacket &rArr; MCI_StopMotor
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_StopRamp
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_StopMotor
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_StartMotor
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetSTMState
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_FaultAcknowledged
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_RunMotorControlTasks
</UL>

<P><STRONG><a name="[9b]"></a>MC_APP_BootHook</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, mc_app_hooks.o(.text.MC_APP_BootHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = MC_APP_BootHook &rArr; SPDPOT_Init &rArr; POT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPDPOT_Init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_RegisterRegConv
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[9e]"></a>MC_APP_PostMediumFrequencyHook_M1</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, mc_app_hooks.o(.text.MC_APP_PostMediumFrequencyHook_M1))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MC_APP_PostMediumFrequencyHook_M1 &rArr; SPDPOT_Run &rArr; STC_ExecRamp
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPDPOT_Run
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_ExecRegularConv
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_RunMotorControlTasks
</UL>

<P><STRONG><a name="[a1]"></a>MC_GetSTMStateMotor1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mc_api.o(.text.MC_GetSTMStateMotor1))
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetSTMState
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_HandleStartStopButton_cb
</UL>

<P><STRONG><a name="[a2]"></a>MC_RunMotorControlTasks</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, mc_tasks.o(.text.MC_RunMotorControlTasks))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MC_RunMotorControlTasks &rArr; TSK_MediumFrequencyTaskM1 &rArr; SixStep_CalcSpeedRef &rArr; STC_CalcSpeedReference &rArr; PI_Controller
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SafetyTask
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_APP_PostMediumFrequencyHook_M1
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_ReceivedPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_BRK_TIM15_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[a5]"></a>MC_StartMotor1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mc_api.o(.text.MC_StartMotor1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MC_StartMotor1 &rArr; MCI_StartMotor
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_StartMotor
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_HandleStartStopButton_cb
</UL>

<P><STRONG><a name="[a6]"></a>MC_StopMotor1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mc_api.o(.text.MC_StopMotor1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MC_StopMotor1 &rArr; MCI_StopMotor
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_StopMotor
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_HandleStartStopButton_cb
</UL>

<P><STRONG><a name="[a7]"></a>MCboot</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, mc_tasks.o(.text.MCboot))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = MCboot &rArr; SIX_STEP_Init &rArr; SIX_STEP_Clear &rArr; PWMC_SwitchOffPWM
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSS_Init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIX_STEP_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVBS_Init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_RegisterRegConv
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_HandleInit
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_Init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_APP_BootHook
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASPEP_start
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_MotorControl_Init
</UL>

<P><STRONG><a name="[ae]"></a>MX_MotorControl_Init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, motorcontrol.o(.text.MX_MotorControl_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = MX_MotorControl_Init &rArr; MCboot &rArr; SIX_STEP_Init &rArr; SIX_STEP_Clear &rArr; PWMC_SwitchOffPWM
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_lock_pins
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b1]"></a>NTC_CalcAvTemp</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, ntc_temperature_sensor.o(.text.NTC_CalcAvTemp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NTC_CalcAvTemp
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_SetFaultState
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SafetyTask_PWMOFF
</UL>

<P><STRONG><a name="[c5]"></a>NTC_GetAvTemp_C</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ntc_temperature_sensor.o(.text.NTC_GetAvTemp_C))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetRegisterMotor1
</UL>

<P><STRONG><a name="[ad]"></a>NTC_Init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ntc_temperature_sensor.o(.text.NTC_Init))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[b2]"></a>NTC_SetFaultState</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, ntc_temperature_sensor.o(.text.NTC_SetFaultState))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_CalcAvTemp
</UL>

<P><STRONG><a name="[c9]"></a>PID_GetKD</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pid_regulator.o(.text.PID_GetKD))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetRegisterMotor1
</UL>

<P><STRONG><a name="[cc]"></a>PID_GetKDDivisorPOW2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pid_regulator.o(.text.PID_GetKDDivisorPOW2))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetRegisterMotor1
</UL>

<P><STRONG><a name="[c8]"></a>PID_GetKI</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pid_regulator.o(.text.PID_GetKI))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetRegisterMotor1
</UL>

<P><STRONG><a name="[118]"></a>PID_GetKIDivisor</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pid_regulator.o(.text.PID_GetKIDivisor))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[cb]"></a>PID_GetKIDivisorPOW2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pid_regulator.o(.text.PID_GetKIDivisorPOW2))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetRegisterMotor1
</UL>

<P><STRONG><a name="[cd]"></a>PID_GetKP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pid_regulator.o(.text.PID_GetKP))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetRegisterMotor1
</UL>

<P><STRONG><a name="[bb]"></a>PID_GetKPDivisorPOW2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pid_regulator.o(.text.PID_GetKPDivisorPOW2))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetRegisterMotor1
</UL>

<P><STRONG><a name="[aa]"></a>PID_HandleInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pid_regulator.o(.text.PID_HandleInit))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIX_STEP_Init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[f5]"></a>PID_SetIntegralTerm</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pid_regulator.o(.text.PID_SetIntegralTerm))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_Clear
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[ce]"></a>PID_SetKD</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pid_regulator.o(.text.PID_SetKD))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_SetRegisterMotor1
</UL>

<P><STRONG><a name="[d6]"></a>PID_SetKDDivisorPOW2</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pid_regulator.o(.text.PID_SetKDDivisorPOW2))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_SetRegisterMotor1
</UL>

<P><STRONG><a name="[d4]"></a>PID_SetKI</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pid_regulator.o(.text.PID_SetKI))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_SetRegisterMotor1
</UL>

<P><STRONG><a name="[b3]"></a>PID_SetKIDivisorPOW2</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, pid_regulator.o(.text.PID_SetKIDivisorPOW2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PID_SetKIDivisorPOW2
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetUpperIntegralTermLimit
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetLowerIntegralTermLimit
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_SetRegisterMotor1
</UL>

<P><STRONG><a name="[d3]"></a>PID_SetKP</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pid_regulator.o(.text.PID_SetKP))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_SetRegisterMotor1
</UL>

<P><STRONG><a name="[d5]"></a>PID_SetKPDivisorPOW2</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pid_regulator.o(.text.PID_SetKPDivisorPOW2))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_SetRegisterMotor1
</UL>

<P><STRONG><a name="[b5]"></a>PID_SetLowerIntegralTermLimit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pid_regulator.o(.text.PID_SetLowerIntegralTermLimit))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetKIDivisorPOW2
</UL>

<P><STRONG><a name="[b4]"></a>PID_SetUpperIntegralTermLimit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pid_regulator.o(.text.PID_SetUpperIntegralTermLimit))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetKIDivisorPOW2
</UL>

<P><STRONG><a name="[f4]"></a>PI_Controller</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, pid_regulator.o(.text.PI_Controller))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PI_Controller
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_CalcSpeedReference
</UL>

<P><STRONG><a name="[b6]"></a>POT_Clear</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, potentiometer.o(.text.POT_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = POT_Clear
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPDPOT_Init
</UL>

<P><STRONG><a name="[b8]"></a>POT_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, potentiometer.o(.text.POT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = POT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPDPOT_Init
</UL>

<P><STRONG><a name="[f2]"></a>POT_TakeMeasurement</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, potentiometer.o(.text.POT_TakeMeasurement))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = POT_TakeMeasurement
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPDPOT_Run
</UL>

<P><STRONG><a name="[105]"></a>PWMC_BRK_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, pwmc_sixstep.o(.text.PWMC_BRK_IRQHandler))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_BRK_TIM15_IRQHandler
</UL>

<P><STRONG><a name="[11b]"></a>PWMC_DisableHighFreqTask</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pwmc_sixstep.o(.text.PWMC_DisableHighFreqTask))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[ff]"></a>PWMC_ElAngleToStep</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, pwmc_sixstep.o(.text.PWMC_ElAngleToStep))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SixStep_StepCommution
</UL>

<P><STRONG><a name="[fb]"></a>PWMC_ForceNextStep</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, pwmc_sixstep.o(.text.PWMC_ForceNextStep))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SixStep_StepCommution
</UL>

<P><STRONG><a name="[c7]"></a>PWMC_GetLSModConfig</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, pwmc_sixstep.o(.text.PWMC_GetLSModConfig))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetRegisterMotor1
</UL>

<P><STRONG><a name="[ba]"></a>PWMC_GetQuasiSynchState</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pwmc_sixstep.o(.text.PWMC_GetQuasiSynchState))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetRegisterMotor1
</UL>

<P><STRONG><a name="[ed]"></a>PWMC_Init</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, pwmc_sixstep.o(.text.PWMC_Init))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIX_STEP_Init
</UL>

<P><STRONG><a name="[11f]"></a>PWMC_IsFaultOccurred</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, pwmc_sixstep.o(.text.PWMC_IsFaultOccurred))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SafetyTask_PWMOFF
</UL>

<P><STRONG><a name="[fc]"></a>PWMC_LoadNextStep</STRONG> (Thumb, 330 bytes, Stack size 16 bytes, pwmc_sixstep.o(.text.PWMC_LoadNextStep))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PWMC_LoadNextStep
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SixStep_StepCommution
</UL>

<P><STRONG><a name="[107]"></a>PWMC_SetADCTriggerChannel</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pwmc_sixstep.o(.text.PWMC_SetADCTriggerChannel))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[e9]"></a>PWMC_SetAlignFlag</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pwmc_sixstep.o(.text.PWMC_SetAlignFlag))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIX_STEP_HighFrequencyTask
</UL>

<P><STRONG><a name="[d0]"></a>PWMC_SetLSModConfig</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, pwmc_sixstep.o(.text.PWMC_SetLSModConfig))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_SetRegisterMotor1
</UL>

<P><STRONG><a name="[fa]"></a>PWMC_SetPhaseVoltage</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pwmc_sixstep.o(.text.PWMC_SetPhaseVoltage))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SixStep_StepCommution
</UL>

<P><STRONG><a name="[d1]"></a>PWMC_SetQuasiSynchState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pwmc_sixstep.o(.text.PWMC_SetQuasiSynchState))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_SetRegisterMotor1
</UL>

<P><STRONG><a name="[e5]"></a>PWMC_SwitchOffPWM</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, pwmc_sixstep.o(.text.PWMC_SwitchOffPWM))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PWMC_SwitchOffPWM
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SafetyTask_PWMOFF
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIX_STEP_Clear
</UL>

<P><STRONG><a name="[112]"></a>PWMC_SwitchOnPWM</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, pwmc_sixstep.o(.text.PWMC_SwitchOnPWM))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[10b]"></a>PWMC_TurnOnLowSides</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, pwmc_sixstep.o(.text.PWMC_TurnOnLowSides))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[f9]"></a>RCM_ExecNextConv</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, regular_conversion_manager.o(.text.RCM_ExecNextConv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCM_ExecNextConv
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SixStep_StepCommution
</UL>

<P><STRONG><a name="[9f]"></a>RCM_ExecRegularConv</STRONG> (Thumb, 390 bytes, Stack size 24 bytes, regular_conversion_manager.o(.text.RCM_ExecRegularConv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCM_ExecRegularConv
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SafetyTask_PWMOFF
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_ExecUserConv
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_APP_PostMediumFrequencyHook_M1
</UL>

<P><STRONG><a name="[b9]"></a>RCM_ExecUserConv</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, regular_conversion_manager.o(.text.RCM_ExecUserConv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RCM_ExecUserConv &rArr; RCM_ExecRegularConv
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_ExecRegularConv
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SafetyTask
</UL>

<P><STRONG><a name="[f8]"></a>RCM_ReadOngoingConv</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, regular_conversion_manager.o(.text.RCM_ReadOngoingConv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCM_ReadOngoingConv
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SixStep_StepCommution
</UL>

<P><STRONG><a name="[9c]"></a>RCM_RegisterRegConv</STRONG> (Thumb, 482 bytes, Stack size 16 bytes, regular_conversion_manager.o(.text.RCM_RegisterRegConv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCM_RegisterRegConv
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_APP_BootHook
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[95]"></a>RI_GetIDSize</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, register_interface.o(.text.RI_GetIDSize))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCPA_cfgLog
</UL>

<P><STRONG><a name="[96]"></a>RI_GetPtrReg</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, register_interface.o(.text.RI_GetPtrReg))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCPA_cfgLog
</UL>

<P><STRONG><a name="[59]"></a>RI_GetRegisterGlobal</STRONG> (Thumb, 452 bytes, Stack size 16 bytes, register_interface.o(.text.RI_GetRegisterGlobal))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RI_GetRegisterGlobal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mcp.o(.rodata..L__const.RI_GetRegCommandParser.GetRegFcts)
</UL>
<P><STRONG><a name="[5a]"></a>RI_GetRegisterMotor1</STRONG> (Thumb, 1772 bytes, Stack size 96 bytes, register_interface.o(.text.RI_GetRegisterMotor1))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = RI_GetRegisterMotor1 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VBS_GetAvBusVoltage_V
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_GetQuasiSynchState
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_GetLSModConfig
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_GetKPDivisorPOW2
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_GetKP
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_GetKIDivisorPOW2
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_GetKI
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_GetKDDivisorPOW2
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_GetKD
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_GetAvTemp_C
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BADC_GetBemfSensorlessParam
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetLastRampFinalDuration
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetFaultState
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetSTMState
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetMecSpeedRefUnit
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetLastRampFinalSpeed
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetDutyCycleRef
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetControlMode
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetAvrgMecSpeedUnit
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpgt
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mcp.o(.rodata..L__const.RI_GetRegCommandParser.GetRegFcts)
</UL>
<P><STRONG><a name="[5b]"></a>RI_SetRegisterGlobal</STRONG> (Thumb, 294 bytes, Stack size 8 bytes, register_interface.o(.text.RI_SetRegisterGlobal))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RI_SetRegisterGlobal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mcp.o(.rodata..L__const.RI_SetRegCommandParser.SetRegFcts)
</UL>
<P><STRONG><a name="[5c]"></a>RI_SetRegisterMotor1</STRONG> (Thumb, 1154 bytes, Stack size 88 bytes, register_interface.o(.text.RI_SetRegisterMotor1))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = RI_SetRegisterMotor1 &rArr; MCPA_cfgLog
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_SetQuasiSynchState
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_SetLSModConfig
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetKPDivisorPOW2
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetKP
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetKIDivisorPOW2
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetKI
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetKDDivisorPOW2
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetKD
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCPA_cfgLog
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BADC_SetBemfSensorlessParam
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_ExecSpeedRamp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mcp.o(.rodata..L__const.RI_SetRegCommandParser.SetRegFcts)
</UL>
<P><STRONG><a name="[d7]"></a>RUC_Clear</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, revup_ctrl_sixstep.o(.text.RUC_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RUC_Clear &rArr; STC_ExecRamp
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_SetControlMode
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_ExecRamp
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSS_Clear
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_GetDutyCycleRef
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSS_SetMecAcceleration
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[db]"></a>RUC_Exec</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, revup_ctrl_sixstep.o(.text.RUC_Exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RUC_Exec &rArr; STC_ExecRamp
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_ExecRamp
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSS_SetMecAcceleration
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[11c]"></a>RUC_FirstAccelerationStageReached</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, revup_ctrl_sixstep.o(.text.RUC_FirstAccelerationStageReached))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[e8]"></a>RUC_GetDirection</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, revup_ctrl_sixstep.o(.text.RUC_GetDirection))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SixStep_StepCommution
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIX_STEP_HighFrequencyTask
</UL>

<P><STRONG><a name="[f0]"></a>RUC_Init</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, revup_ctrl_sixstep.o(.text.RUC_Init))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIX_STEP_Init
</UL>

<P><STRONG><a name="[e7]"></a>RUC_IsAlignStageNow</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, revup_ctrl_sixstep.o(.text.RUC_IsAlignStageNow))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIX_STEP_HighFrequencyTask
</UL>

<P><STRONG><a name="[dc]"></a>RUC_UpdatePulse</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, revup_ctrl_sixstep.o(.text.RUC_UpdatePulse))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RUC_UpdatePulse
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VBS_GetAvBusVoltage_V
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[dd]"></a>RVBS_CalcAvVbus</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, r_divider_bus_voltage_sensor.o(.text.RVBS_CalcAvVbus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RVBS_CalcAvVbus
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVBS_CheckFaultState
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SafetyTask_PWMOFF
</UL>

<P><STRONG><a name="[de]"></a>RVBS_CheckFaultState</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, r_divider_bus_voltage_sensor.o(.text.RVBS_CheckFaultState))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVBS_CalcAvVbus
</UL>

<P><STRONG><a name="[df]"></a>RVBS_Clear</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, r_divider_bus_voltage_sensor.o(.text.RVBS_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RVBS_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVBS_Init
</UL>

<P><STRONG><a name="[ac]"></a>RVBS_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, r_divider_bus_voltage_sensor.o(.text.RVBS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RVBS_Init &rArr; RVBS_Clear
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVBS_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[e0]"></a>SIX_STEP_Clear</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, mc_tasks_sixstep.o(.text.SIX_STEP_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SIX_STEP_Clear &rArr; PWMC_SwitchOffPWM
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_GetDutyCycleRef
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_Clear
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BADC_Stop
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BADC_SpeedMeasureOff
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BADC_Clear
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_SwitchOffPWM
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SafetyTask_PWMOFF
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HardwareFaultTask
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIX_STEP_Init
</UL>

<P><STRONG><a name="[e6]"></a>SIX_STEP_HighFrequencyTask</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, mc_tasks_sixstep.o(.text.SIX_STEP_HighFrequencyTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SIX_STEP_HighFrequencyTask &rArr; SixStep_StepCommution &rArr; PWMC_LoadNextStep
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSS_CalcElAngle
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SixStep_StepCommution
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUC_IsAlignStageNow
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUC_GetDirection
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_SetAlignFlag
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BADC_CalcElAngle
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
</UL>

<P><STRONG><a name="[a8]"></a>SIX_STEP_Init</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, mc_tasks_sixstep.o(.text.SIX_STEP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SIX_STEP_Init &rArr; SIX_STEP_Clear &rArr; PWMC_SwitchOffPWM
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_Init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_GetMecSpeedRefUnitDefault
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUC_Init
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_Init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BADC_Init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIX_STEP_Clear
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_HandleInit
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_ExecSpeedRamp
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[9d]"></a>SPDPOT_Init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, speed_potentiometer.o(.text.SPDPOT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = SPDPOT_Init &rArr; POT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POT_Init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POT_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_APP_BootHook
</UL>

<P><STRONG><a name="[a0]"></a>SPDPOT_Run</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, speed_potentiometer.o(.text.SPDPOT_Run))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPDPOT_Run &rArr; STC_ExecRamp
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_ExecRamp
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPD_GetAvrgMecSpeedUnit
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetSTMState
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POT_TakeMeasurement
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_APP_PostMediumFrequencyHook_M1
</UL>

<P><STRONG><a name="[8e]"></a>SPD_GetAvrgMecSpeedUnit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, speed_pos_fdbk.o(.text.SPD_GetAvrgMecSpeedUnit))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPDPOT_Run
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_ForceSpeedReferenceToCurrentSpeed
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_CalcSpeedReference
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetAvrgMecSpeedUnit
</UL>

<P><STRONG><a name="[fe]"></a>SPD_GetElSpeedDpp</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, speed_pos_fdbk.o(.text.SPD_GetElSpeedDpp))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SixStep_StepCommution
</UL>

<P><STRONG><a name="[77]"></a>SPD_IsMecSpeedReliable</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, speed_pos_fdbk.o(.text.SPD_IsMecSpeedReliable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPD_IsMecSpeedReliable
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSS_CalcAvrgMecSpeedUnit
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BADC_CalcAvrgMecSpeedUnit
</UL>

<P><STRONG><a name="[f3]"></a>STC_CalcSpeedReference</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, speed_ctrl.o(.text.STC_CalcSpeedReference))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = STC_CalcSpeedReference &rArr; PI_Controller
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPD_GetAvrgMecSpeedUnit
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PI_Controller
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SixStep_CalcSpeedRef
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[e1]"></a>STC_Clear</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, speed_ctrl.o(.text.STC_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = STC_Clear
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetIntegralTerm
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIX_STEP_Clear
</UL>

<P><STRONG><a name="[89]"></a>STC_ExecRamp</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, speed_ctrl.o(.text.STC_ExecRamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = STC_ExecRamp
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_GetDutyCycleRef
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPDPOT_Run
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUC_Exec
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUC_Clear
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_ExecBufferedCommands
</UL>

<P><STRONG><a name="[f6]"></a>STC_ForceSpeedReferenceToCurrentSpeed</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, speed_ctrl.o(.text.STC_ForceSpeedReferenceToCurrentSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = STC_ForceSpeedReferenceToCurrentSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPD_GetAvrgMecSpeedUnit
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[d9]"></a>STC_GetDutyCycleRef</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, speed_ctrl.o(.text.STC_GetDutyCycleRef))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_ExecRamp
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUC_Clear
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIX_STEP_Clear
</UL>

<P><STRONG><a name="[90]"></a>STC_GetMecSpeedRefUnit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, speed_ctrl.o(.text.STC_GetMecSpeedRefUnit))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetMecSpeedRefUnit
</UL>

<P><STRONG><a name="[f1]"></a>STC_GetMecSpeedRefUnitDefault</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, speed_ctrl.o(.text.STC_GetMecSpeedRefUnitDefault))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIX_STEP_Init
</UL>

<P><STRONG><a name="[ef]"></a>STC_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, speed_ctrl.o(.text.STC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = STC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIX_STEP_Init
</UL>

<P><STRONG><a name="[88]"></a>STC_SetControlMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, speed_ctrl.o(.text.STC_SetControlMode))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUC_Clear
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_ExecBufferedCommands
</UL>

<P><STRONG><a name="[10f]"></a>STC_SetSpeedSensor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, speed_ctrl.o(.text.STC_SetSpeedSensor))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[f7]"></a>SixStep_CalcSpeedRef</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mc_tasks_sixstep.o(.text.SixStep_CalcSpeedRef))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SixStep_CalcSpeedRef &rArr; STC_CalcSpeedReference &rArr; PI_Controller
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_CalcSpeedReference
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[119]"></a>SixStep_InitAdditionalMethods</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mc_tasks_sixstep.o(.text.SixStep_InitAdditionalMethods))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[ec]"></a>SixStep_StepCommution</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, mc_tasks_sixstep.o(.text.SixStep_StepCommution))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SixStep_StepCommution &rArr; PWMC_LoadNextStep
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPD_GetElSpeedDpp
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUC_GetDirection
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_ReadOngoingConv
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_ExecNextConv
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_SetPhaseVoltage
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_LoadNextStep
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_ForceNextStep
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_ElAngleToStep
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BADC_StepChangeEvent
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BADC_IsObserverConverged
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIX_STEP_HighFrequencyTask
</UL>

<P><STRONG><a name="[10]"></a>SysTick_Handler</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, stm32_mc_common_it.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SysTick_Handler &rArr; MC_RunMotorControlTasks &rArr; TSK_MediumFrequencyTaskM1 &rArr; SixStep_CalcSpeedRef &rArr; STC_CalcSpeedReference &rArr; PI_Controller
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASPEP_HWDataReceivedIT
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_RunMotorControlTasks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[103]"></a>SystemClock_Config</STRONG> (Thumb, 392 bytes, Stack size 16 bytes, main.o(.text.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SystemClock_Config &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetSystemCoreClock
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[57]"></a>SystemInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, system_stm32g4xx.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(.text)
</UL>
<P><STRONG><a name="[28]"></a>TIM1_BRK_TIM15_IRQHandler</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, stm32g4xx_mc_it.o(.text.TIM1_BRK_TIM15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = TIM1_BRK_TIM15_IRQHandler &rArr; MC_RunMotorControlTasks &rArr; TSK_MediumFrequencyTaskM1 &rArr; SixStep_CalcSpeedRef &rArr; STC_CalcSpeedReference &rArr; PI_Controller
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_BRK_IRQHandler
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_RunMotorControlTasks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM1_UP_TIM16_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32g4xx_mc_it.o(.text.TIM1_UP_TIM16_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TIM1_UP_TIM16_IRQHandler &rArr; TSK_HighFrequencyTask &rArr; SIX_STEP_HighFrequencyTask &rArr; SixStep_StepCommution &rArr; PWMC_LoadNextStep
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TIM2_IRQHandler</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, stm32g4xx_mc_it.o(.text.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TIM2_IRQHandler &rArr; SixStep_StepCommution &rArr; PWMC_LoadNextStep
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_SetADCTriggerChannel
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SixStep_StepCommution
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BADC_StepChangeEvent
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BADC_Start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[10e]"></a>TSK_ChargeBootCapDelayHasElapsedM1</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mc_tasks.o(.text.TSK_ChargeBootCapDelayHasElapsedM1))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[83]"></a>TSK_HardwareFaultTask</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mc_tasks.o(.text.TSK_HardwareFaultTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TSK_HardwareFaultTask &rArr; SIX_STEP_Clear &rArr; PWMC_SwitchOffPWM
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIX_STEP_Clear
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_FaultProcessing
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[106]"></a>TSK_HighFrequencyTask</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, mc_tasks.o(.text.TSK_HighFrequencyTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TSK_HighFrequencyTask &rArr; SIX_STEP_HighFrequencyTask &rArr; SixStep_StepCommution &rArr; PWMC_LoadNextStep
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIX_STEP_HighFrequencyTask
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCPA_dataLog
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_TIM16_IRQHandler
</UL>

<P><STRONG><a name="[a4]"></a>TSK_MediumFrequencyTaskM1</STRONG> (Thumb, 884 bytes, Stack size 32 bytes, mc_tasks_sixstep.o(.text.TSK_MediumFrequencyTaskM1))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TSK_MediumFrequencyTaskM1 &rArr; SixStep_CalcSpeedRef &rArr; STC_CalcSpeedReference &rArr; PI_Controller
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSS_TransitionEnded
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSS_SetStartTransition
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSS_Clear
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSS_CalcAvrgMecSpeedUnit
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SixStep_InitAdditionalMethods
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SixStep_CalcSpeedRef
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_SetSpeedSensor
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_ForceSpeedReferenceToCurrentSpeed
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_CalcSpeedReference
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUC_UpdatePulse
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUC_FirstAccelerationStageReached
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUC_Exec
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUC_Clear
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_TurnOnLowSides
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_SwitchOnPWM
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_DisableHighFreqTask
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetIntegralTerm
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_GetKIDivisor
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_ExecBufferedCommands
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BADC_Start
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BADC_SetSamplingPoint
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BADC_SetLoopClosed
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BADC_SetDirection
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BADC_IsObserverConverged
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BADC_Clear
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BADC_CalcRunDemagTime
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BADC_CalcRevUpDemagTime
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BADC_CalcAvrgMecSpeedUnit
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_StopPermanencyTimeHasElapsedM1
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SetStopPermanencyTimeM1
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SetChargeBootCapDelayM1
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ChargeBootCapDelayHasElapsedM1
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIX_STEP_Clear
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_SwitchOffPWM
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_FaultProcessing
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetOccurredFaults
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetImposedMotorDirection
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetCurrentFaults
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_RunMotorControlTasks
</UL>

<P><STRONG><a name="[a3]"></a>TSK_SafetyTask</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, mc_tasks.o(.text.TSK_SafetyTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TSK_SafetyTask &rArr; TSK_SafetyTask_PWMOFF &rArr; SIX_STEP_Clear &rArr; PWMC_SwitchOffPWM
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SafetyTask_PWMOFF
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_ExecUserConv
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_RunMotorControlTasks
</UL>

<P><STRONG><a name="[11e]"></a>TSK_SafetyTask_PWMOFF</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, mc_tasks.o(.text.TSK_SafetyTask_PWMOFF))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TSK_SafetyTask_PWMOFF &rArr; SIX_STEP_Clear &rArr; PWMC_SwitchOffPWM
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIX_STEP_Clear
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVBS_CalcAvVbus
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_ExecRegularConv
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_SwitchOffPWM
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_IsFaultOccurred
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_CalcAvTemp
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCPA_flushDataLog
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetFaultState
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_FaultProcessing
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SafetyTask
</UL>

<P><STRONG><a name="[10c]"></a>TSK_SetChargeBootCapDelayM1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mc_tasks.o(.text.TSK_SetChargeBootCapDelayM1))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[115]"></a>TSK_SetStopPermanencyTimeM1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mc_tasks.o(.text.TSK_SetStopPermanencyTimeM1))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[114]"></a>TSK_StopPermanencyTimeHasElapsedM1</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mc_tasks.o(.text.TSK_StopPermanencyTimeHasElapsedM1))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[5]"></a>UASPEP_CFG_RECEPTION</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, usart_aspep_driver.o(.text.UASPEP_CFG_RECEPTION))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UASPEP_CFG_RECEPTION
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mcp_config.o(.data.aspepOverUartA)
</UL>
<P><STRONG><a name="[6]"></a>UASPEP_CFG_TRANSMISSION</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, usart_aspep_driver.o(.text.UASPEP_CFG_TRANSMISSION))
<BR>[Address Reference Count : 1]<UL><LI> mcp_config.o(.data.aspepOverUartA)
</UL>
<P><STRONG><a name="[4]"></a>UASPEP_IDLE_ENABLE</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, usart_aspep_driver.o(.text.UASPEP_IDLE_ENABLE))
<BR>[Address Reference Count : 1]<UL><LI> mcp_config.o(.data.aspepOverUartA)
</UL>
<P><STRONG><a name="[3]"></a>UASPEP_INIT</STRONG> (Thumb, 310 bytes, Stack size 8 bytes, usart_aspep_driver.o(.text.UASPEP_INIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UASPEP_INIT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mcp_config.o(.data.aspepOverUartA)
</UL>
<P><STRONG><a name="[79]"></a>UI_HandleStartStopButton_cb</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mc_tasks.o(.text.UI_HandleStartStopButton_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UI_HandleStartStopButton_cb &rArr; MC_StopMotor1 &rArr; MCI_StopMotor
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_StopMotor1
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_StartMotor1
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_GetSTMStateMotor1
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[36]"></a>USART2_IRQHandler</STRONG> (Thumb, 488 bytes, Stack size 16 bytes, stm32_mc_common_it.o(.text.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART2_IRQHandler &rArr; ASPEP_HWReset
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASPEP_HWReset
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASPEP_HWDataTransmittedIT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[ca]"></a>VBS_GetAvBusVoltage_V</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bus_voltage_sensor.o(.text.VBS_GetAvBusVoltage_V))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetRegisterMotor1
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUC_UpdatePulse
</UL>

<P><STRONG><a name="[116]"></a>VSS_CalcAvrgMecSpeedUnit</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, virtual_speed_sensor.o(.text.VSS_CalcAvrgMecSpeedUnit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = VSS_CalcAvrgMecSpeedUnit &rArr; SPD_IsMecSpeedReliable
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPD_IsMecSpeedReliable
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[ea]"></a>VSS_CalcElAngle</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, virtual_speed_sensor.o(.text.VSS_CalcElAngle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VSS_CalcElAngle
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIX_STEP_HighFrequencyTask
</UL>

<P><STRONG><a name="[d8]"></a>VSS_Clear</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, virtual_speed_sensor.o(.text.VSS_Clear))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUC_Clear
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSS_Init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[ab]"></a>VSS_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, virtual_speed_sensor.o(.text.VSS_Init))
<BR><BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSS_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[da]"></a>VSS_SetMecAcceleration</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, virtual_speed_sensor.o(.text.VSS_SetMecAcceleration))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VSS_SetMecAcceleration
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUC_Exec
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUC_Clear
</UL>

<P><STRONG><a name="[11d]"></a>VSS_SetStartTransition</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, virtual_speed_sensor.o(.text.VSS_SetStartTransition))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[117]"></a>VSS_TransitionEnded</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, virtual_speed_sensor.o(.text.VSS_TransitionEnded))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[67]"></a>main</STRONG> (Thumb, 2818 bytes, Stack size 152 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = main &rArr; MX_MotorControl_Init &rArr; MCboot &rArr; SIX_STEP_Init &rArr; SIX_STEP_Clear &rArr; PWMC_SwitchOffPWM
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_MotorControl_Init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_Init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_Init
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_BDTR_Init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_Init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_Init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_Init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_INJ_Init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_CommonInit
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[b0]"></a>mc_lock_pins</STRONG> (Thumb, 314 bytes, Stack size 12 bytes, mc_tasks.o(.text.mc_lock_pins))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mc_lock_pins
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_MotorControl_Init
</UL>

<P><STRONG><a name="[12f]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpge
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[16e]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf), UNUSED)

<P><STRONG><a name="[12d]"></a>_dcmpeq</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dneq
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deq
</UL>

<P><STRONG><a name="[c3]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetRegisterMotor1
</UL>

<P><STRONG><a name="[130]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[c0]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetRegisterMotor1
</UL>

<P><STRONG><a name="[16f]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[170]"></a>__aeabi_cdcmpge</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dgeqf.o(x$fpl$dgeqf), UNUSED)

<P><STRONG><a name="[131]"></a>_dcmpge</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dgeqf.o(x$fpl$dgeqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dgeq
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dgr
</UL>

<P><STRONG><a name="[171]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)

<P><STRONG><a name="[132]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dls
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dleq
</UL>

<P><STRONG><a name="[172]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)

<P><STRONG><a name="[c1]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetRegisterMotor1
</UL>

<P><STRONG><a name="[133]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[12e]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpge
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
</UL>

<P><STRONG><a name="[134]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
</UL>

<P><STRONG><a name="[173]"></a>__aeabi_dcmpeq</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)

<P><STRONG><a name="[135]"></a>_deq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[136]"></a>_dneq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[c2]"></a>__aeabi_dcmpgt</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dcmpgt
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetRegisterMotor1
</UL>

<P><STRONG><a name="[137]"></a>_dgr</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpge
</UL>

<P><STRONG><a name="[174]"></a>__aeabi_dcmpge</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)

<P><STRONG><a name="[138]"></a>_dgeq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpge
</UL>

<P><STRONG><a name="[175]"></a>__aeabi_dcmple</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)

<P><STRONG><a name="[139]"></a>_dleq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[176]"></a>__aeabi_dcmplt</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)

<P><STRONG><a name="[13a]"></a>_dls</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[61]"></a>_fp_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[177]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[178]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[75]"></a>ASPEP_TXframeProcess</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, aspep.o(.text.ASPEP_TXframeProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ASPEP_TXframeProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASPEP_sendPacket
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
